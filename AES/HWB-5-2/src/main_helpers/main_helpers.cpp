//
// Created by Olaf Bykowski on 05/11/2024.
//

#include <cstdio>
#include <cstdint>
#include <chrono>
#include "../helper/helper.h"
#include "../aes/aes.h"

//****************************
// Helper Functions
//****************************
void testXTime(int &test_failed) {
    uint8_t res[256] = {
        0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12,
        0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e, 0x20, 0x22, 0x24, 0x26,
        0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a,
        0x3c, 0x3e, 0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e,
        0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 0x60, 0x62,
        0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76,
        0x78, 0x7a, 0x7c, 0x7e, 0x80, 0x82, 0x84, 0x86, 0x88, 0x8a,
        0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e,
        0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2,
        0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe, 0xc0, 0xc2, 0xc4, 0xc6,
        0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda,
        0xdc, 0xde, 0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee,
        0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe, 0x1b, 0x19,
        0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d,
        0x03, 0x01, 0x07, 0x05, 0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31,
        0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25,
        0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49,
        0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45, 0x7b, 0x79, 0x7f, 0x7d,
        0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61,
        0x67, 0x65, 0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95,
        0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85, 0xbb, 0xb9,
        0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad,
        0xa3, 0xa1, 0xa7, 0xa5, 0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1,
        0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5,
        0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9,
        0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5
    };
    for (uint16_t i = 0; i < 256; i++) {
        if (xtime((uint8_t) i) != res[i]) {
            test_failed = 1;
            break;
        }
    }
}

void testExpandKey(int &test_failed) {
    uint8_t key_b[16] = {
        0xef, 0xbe, 0xad, 0xde, 0xbe, 0xba, 0xfe, 0xca, 0x0D, 0xF0, 0xAD, 0xBA, 0x00, 0x11, 0x22, 0x33
    };
    uint32_t key_w[44] = {0};
    uint32_t res_key_w[44] = {
        0xdeadbeef, 0xcafebabe, 0xbaadf00d, 0x33221100,
        0xbd6e2d6c, 0x779097d2, 0xcd3d67df, 0xfe1f76df,
        0x23d5ed56, 0x54457a84, 0x99781d5b, 0x67676b84,
        0x7c50682d, 0x281512a9, 0xb16d0ff2, 0xd60a6476,
        0x44a60f66, 0x6cb31dcf, 0xddde123d, 0x0bd4764b,
        0xf78d474e, 0x9b3e5a81, 0x46e048bc, 0x4d343ef7,
        0x9f6e5fdc, 0x0450055d, 0x42b04de1, 0x0f847316,
        0xd8180013, 0xdc48054e, 0x9ef848af, 0x917c3bb9,
        0x8e991071, 0x52d1153f, 0xcc295d90, 0x5d556629,
        0x2bd5ec59, 0x7904f966, 0xb52da4f6, 0xe878c2df,
        0xb54e504a, 0xcc4aa92c, 0x79670dda, 0x911fcf05,
    };
    expandKey(key_b, key_w);
    for (int i = 0; i < 44; i++) {
        if (key_w[i] != res_key_w[i]) {
            test_failed = 1;
            break;
        }
    }
    // test AddRoundKey (last round)
    t_state state = {0x01234567, 0x89abcdef, 0xdeadbeef, 0x00112233};
    t_state res_state = {0xb46d152d, 0x45e164c3, 0xa7cab335, 0x910eed36};
    addRoundKey(state, key_w, 10);
    for (int i = 0; i < 4; i++) {
        if (state[i] != res_state[i]) {
            test_failed = 1;
        }
    }
}

void testAES(int &test_failed) {
    uint8_t key[16] = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
    };
    uint8_t in[16] = {
        0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff
    };
    uint8_t out[16] = {0};
    uint8_t res_out[16] = {
        0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a
    };

    aes(in, out, key);


    for (int i = 0; i < 16; i++) {
        if (out[i] != res_out[i]) {
            test_failed = 1;
        }
    }
}
